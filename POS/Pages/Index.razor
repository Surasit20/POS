@page "/product"
@using System.Text.Json;
@inject HttpClient Http
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.TreeMap
<PageTitle>Index</PageTitle>

<div class="container-fluid warpper-product">
	@if (products != null)
	{
		<div class="container">
			<div class="row">
				<div class="col">
					<h3>Select</h3>
					<SfListView DataSource="@DataSelect" ShowCheckBox="true" onchange="Rerender">
						<ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
					</SfListView>
				</div>

				<div class="col">
					<h3>Order By</h3>
					<SfRadioButton Label="Desc" Name="Desc" Value="desc" @bind-Checked="stringOrderBy"></SfRadioButton>
					<SfRadioButton Label="Asc" Name="Asc" Value="asc" @bind-Checked="stringOrderBy"></SfRadioButton>
					<SfListView DataSource="@DataOrderBy" ShowCheckBox="true" onchange="Rerender">
					<ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
					</SfListView>
				</div>

			</div>

			<div class="row">

			</div>

			<div class="row my-3">
				<div class="d-flex justify-content-center">
					<SfButton @onclick="onToggleClick" CssClass="btn" IsToggle="true" IsPrimary="true">Search</SfButton>
				</div>
			</div>

			<br />
		</div>
		<SfGrid @ref="Grid" TValue="Product" AllowPaging="true" DataSource="products">
			
	@*		<GridPageSettings PageSize="5"></GridPageSettings>
		<GridColumn>
				<GridColumn Field=@nameof(Product.ProductId) HeaderText="Product ID" TextAlign="TextAlign.Right" Width="120" DefaultValue="0"></GridColumn>
				<GridColumn Field=@nameof(Product.Name) HeaderText="Product ID" Width="120" DefaultValue="0"></GridColumn>
				<GridColumn Field=@nameof(Product.PurchasePrice) HeaderText="Purchase Price" Width="120" DefaultValue="0"></GridColumn>
				<GridColumn Field=@nameof(Product.SellingPrice) HeaderText="Selling Price" Width="120" DefaultValue="0"></GridColumn>
				<GridColumn Field=@nameof(Product.Unit) HeaderText="Unit" Width="120" DefaultValue="0"></GridColumn>
			</GridColumn>*@

		</SfGrid>
	}
	else
	{
		<p>Loading....</p>
	}
</div>


@*<SfDataManager Url="@url" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>*@





@code {
	SfGrid<Product> Grid { get; set; }
	List<Product> products { get; set; }
	string url = "https://localhost:7085/odata/ProductOData";
	public Query Qry = new Query().Expand(new List<string> { "Name" });
	string qry = "?";
	private string stringOrderBy = "desc";

	public async Task<List<Product>> LoadData()
	{
		var response = await Http.GetAsync($"{url}{qry}");
		if (response.IsSuccessStatusCode)
		{
			var responseContent = await response.Content.ReadAsStringAsync();
			var data = JsonSerializer.Deserialize<ProductApiResponse>(responseContent);
			return data.Product;
		}
		else
		{
			return new List<Product>();
		}
	}
	protected async override Task OnInitializedAsync()
	{

		products = await LoadData();

	}
	private DataModel[] DataSelect = {

		new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=false },
		new DataModel { Text = "Name", Id = "Name" ,IsChecked=false },
		new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=false },
		new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=false  },
		new DataModel { Text = "Unit", Id = "Unit",IsChecked=false  },

	};

	private DataModel[] DataOrderBy = {

		new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=false },
		new DataModel { Text = "Name", Id = "Name" ,IsChecked=false },
		new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=false },
		new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=false  },
		new DataModel { Text = "Unit", Id = "Unit",IsChecked=false  },

	};

	public class DataModel
	{
		public string Text { get; set; }
		public string Id { get; set; }
		public bool IsChecked { get; set; }

	}

	async Task onToggleClick()
	{
		qry += "select=";
		foreach (DataModel dataModel in DataSelect)
		{
			if (dataModel.IsChecked == true)
			{

				qry += $"{dataModel.Id.ToLower()},";
			}
		}
		qry = qry.Remove(qry.Length - 1, 1);
		qry += "&orderby=";


		foreach (DataModel dataModel in DataOrderBy)
		{
			if (dataModel.IsChecked == true)
			{

				qry += $"{dataModel.Id.ToLower()},";
			}

		}
		qry = qry.Remove(qry.Length - 1, 1);
		qry += $" {stringOrderBy}";

		products = await LoadData();
		StateHasChanged();
		qry = "?";
		Grid.Refresh();
	}

}



<style>
	.btn {
		border-radius: 0;
		height: 50px;
		width: 400px;
		background-color: #007BFF;
	}

	.e-copy::before {
		content: '\e77b';
	}

	.e-btn.e-icon-btn {
		padding: initial;
	}

	.warpper-product {
		height: 100%;
	}
</style>
