@page "/product"
@using System.Text.Json;
@inject HttpClient Http
@using Frontend.Service.OrderService;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Spinner
@using global::Shared.ModelDTO;
@inject IOrderService OrderService
<PageTitle>Index</PageTitle>

<div class="container-fluid px-4">
    @if (true)
    {
        <SfFab Target="#target" IconCss="e-icons e-plus" OnClick="@OpenDialog" Position=FabPosition.TopRight></SfFab>
        <div class="container">
            <div class="row">
                <div class="col-xl-6 col-lg-12">
                    <h3>Select</h3>
                    <SfListView DataSource="@DataSelect" ShowCheckBox="true" onchange="Rerender">
                        <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
                    </SfListView>
                </div>

                <div class="col-xl-6 col-lg-12">
                    <h3>Order By</h3>
                    <SfRadioButton Label="Desc" Name="Desc" Value="desc" @bind-Checked="stringOrderBy"></SfRadioButton>
                    <SfRadioButton Label="Asc" Name="Asc" Value="asc" @bind-Checked="stringOrderBy"></SfRadioButton>
                    <SfListView DataSource="@DataOrderBy" ShowCheckBox="true" onchange="Rerender">
                        <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
                    </SfListView>
                </div>

            </div>


            <div class="row my-3">
                <div class="d-flex justify-content-center">
                    <SfButton @onclick="onToggleClick" CssClass="btn" IsToggle="true" IsPrimary="true">Search</SfButton>
                </div>
            </div>


            <div class="row">
                <div class="col-xl-4 col-lg-12">

                    <h2>
                        Search By Product ID
                    </h2>
                    <div class="row">
                        <div class="col-10">
                            <SfNumericTextBox TValue="int" @bind-Value="@numericValue"></SfNumericTextBox>
                        </div>
                        <div class="col-2">
                            <SfButton @onclick="onClickSearchId" IsToggle="true" IsPrimary="true">Search</SfButton>
                        </div>
                    </div>


                </div>


                <div class="col-xl-4 col-lg-12">
                    <h2>
                        Search By Product Name
                    </h2>

                    <div class="row">
                        <div class="col-10">
                            <SfTextBox TValue="string" @bind-Value="@nameProduct"></SfTextBox>
                        </div>
                        <div class="col-2">
                            <SfButton @onclick="onClickSearchName" IsPrimary="true">Search</SfButton>
                        </div>
                    </div>
                </div>

                <div class="col-xl-4 col-lg-12">
                    <h2>
                        Delete By Id
                    </h2>

                    <div class="row">
                        <div class="col-10">
                            <SfNumericTextBox TValue="int" @bind-Value="@numericValueIdDelte"></SfNumericTextBox>
                        </div>
                        <div class="col-2">
                            <SfButton @onclick="onClickDeleteById" CssClass="e-danger">Delete</SfButton>
                        </div>
                    </div>
                </div>
            </div>

            <br />
        </div>
        <SfGrid @ref="Grid" TValue="Product" AllowPaging="true"  Toolbar="@ToolbarItems">
            <GridEvents OnActionBegin="ActionBeginHandler" TValue="Product"></GridEvents>
            <SfDataManager @ref="dm" Url="@url" Adaptor="Adaptors.ODataV4Adaptor">></SfDataManager>
            <GridEditSettings AllowEditing="true"></GridEditSettings>
            <GridPageSettings PageSize="10">
    
          @*      <Template>
                    <div class="PagerTemplate">
                        <div class="@($"e-first e-icons e-icon-first {ValidateFirst()} align-icons e-firstpage")" @onclick="ShowFirstPage" title="Go to first page">
                        </div>
                        <div class="@($"e-prev e-icons e-icon-prev {ValidateBack()} align-icons")" @onclick="ShowPreviousPage" title="Go to previous page"></div>
                        <div>
                            <input class="textbox add-border" type="text" @bind="pageNo" size="2" @oninput="LaunchEnteredPage" />
                            <div id="totalpages" class="textbox"> of @totalPages pages </div>
                        </div>
                        <div class="@($"e-next e-icons e-icon-next   {ValidateForward()} align-icons e-next")" @onclick="ShowNextPage" title="Go to next page"></div>
                        <div class="@($"e-last e-icons e-icon-last {ValidateLast()} align-icons")" @onclick="ShowLastPage" title="Go to last page"></div>
                    </div>

                </Template>*@
            </GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(Product.ProductId) HeaderText="Product Id" Width="150"> </GridColumn>
                <GridColumn Field=@nameof(Product.Name) HeaderText="Name" Width="150"> </GridColumn>
                <GridColumn Field=@nameof(Product.Description) HeaderText="Description" Width="150"> </GridColumn>
                <GridColumn Field=@nameof(Product.PurchasePrice) HeaderText="Purchase Price" Width="150"> </GridColumn>
                <GridColumn Field=@nameof(Product.SellingPrice) HeaderText="Selling Price" Width="150"> </GridColumn>
                <GridColumn Field=@nameof(Product.Unit) HeaderText="Unit" Width="150"> </GridColumn>
            </GridColumns>

        </SfGrid>


        <SfDialog Width="300px" ShowCloseIcon="true" CloseOnEscape="true" @bind-Visible="@IsVisible">
            <DialogTemplates>
                <Header>
                    <div>Add Product</div>
                </Header>
                <Content>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Name" FloatLabelType='@FloatLabelType.Always' Placeholder='Name'></SfTextBox>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Description" FloatLabelType='@FloatLabelType.Always' Placeholder='Description'></SfTextBox>
                    <SfNumericTextBox TValue="decimal" @bind-Value="@productDto.PurchasePrice" FloatLabelType='@FloatLabelType.Always' Placeholder='Purchase Price'></SfNumericTextBox>
                    <SfNumericTextBox TValue="decimal" @bind-Value="@productDto.SellingPrice" FloatLabelType='@FloatLabelType.Always' Placeholder='Selling Price'></SfNumericTextBox>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Unit" FloatLabelType='@FloatLabelType.Always' Placeholder='Unit'></SfTextBox>

                </Content>
            </DialogTemplates>
            <DialogButtons>

                <DialogButton Content="@((!IsAddLoadingVisible) ?"Add" :"Loading....")" Disabled="@IsAddLoadingVisible" IsPrimary="true" IconCss="e-icons e-plus" OnClick="@onAddProduct" />

                <DialogButton Content="Cancel" IconCss="e-icons e-close-icon" OnClick="@CloseDialog" />
            </DialogButtons>
        </SfDialog>

        <div class="col-lg-4 control-section">
            <SfToast @ref="ToastObj" ID="toast_type">
                <ToastPosition X="@ToastPosition"></ToastPosition>
            </SfToast>
        </div>

    }
    else
    {
        <SfSpinner></SfSpinner>
    }
</div>


@*<SfDataManager Url="@url" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>*@





@code {

    SfGrid<Product> Grid { get; set; }
    public DataManager dm { get; set; }
    List<Product> products { get; set; } = new List<Product>();
    string url = "https://localhost:7085/odata/ProductOData";
    private Query Qry = new Query().Expand(new List<string> { "Name" });
    string qry = "?";
    private string stringOrderBy = "desc";
    private string nextPage = "";
    private int numericValue { get; set; } = 10;
    private int numericValueIdDelte { get; set; } = 10;
    private string nameProduct { get; set; } = "";
    private bool IsVisible { get; set; } = false;
    private bool IsAddLoadingVisible { get; set; } = false;
    private ProductDTO productDto { get; set; } = new ProductDTO();
    SfToast ToastObj;
    private string ToastPosition = "Right";
    public int pageNo { get; set; }
    public int totalPages { get; set; }
    public int totalCount { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;
    public bool DisableFirstIcon = false;
    public bool DisableLastIcon = false;
    private List<string> ToolbarItems = new List<string>() { "Edit" , "Update", "Cancel" };
    public async Task LoadData()
    {
        try
        {

            var data = await OrderService.GetProductsAsync(qry, nextPage);
            if (nextPage == "")
            {
                products = data.Product;
                totalCount = data.Count;
                nextPage = data.NextLink;

                await Grid.Refresh();
                StateHasChanged();
                return;
            }

            if (data.Product != null)
            {
                foreach (Product product in data.Product)
                {
                    products.Add(product);
                }
            }

            totalCount = data.Count;
            nextPage = data.NextLink;
            await Grid.Refresh();

        }
        catch (Exception err)
        {
            Console.WriteLine(err.Message);

        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender)
        {
            await LoadData();
            totalPages = totalCount / Grid.PageSettings.PageSize;
        }
        pageNo = Grid.PageSettings.CurrentPage;
        if (Grid.PageSettings.CurrentPage == totalPages)
        {
            DisableForwardIcon = true;
            DisableLastIcon = true;
        }
        else
        {
            DisableForwardIcon = false;
            DisableLastIcon = false;
        }
        if (Grid.PageSettings.CurrentPage == 1)
        {
            DisableBackIcon = true;
            DisableFirstIcon = true;
        }
        else
        {
            DisableBackIcon = false;
            DisableFirstIcon = false;
        }

        StateHasChanged();

    }

    public string ValidateFirst()
    {
        if (DisableFirstIcon)
        {
            return "disableFirst";
        }
        return "";
    }
    public string ValidateLast()
    {
        if (DisableLastIcon)
        {
            return "disableLast";
        }
        return "";
    }
    public string ValidateForward()
    {
        if (DisableForwardIcon)
        {
            return "disableFront";
        }
        return "";
    }
    public string ValidateBack()
    {
        if (DisableBackIcon)
        {
            return "disableBack";
        }
        return "";
    }
    public async Task ShowNextPage()
    {
        await LoadData();
        await Grid.GoToPageAsync((Grid.PageSettings.CurrentPage) + 1);
    }
    public void ShowPreviousPage()
    {
        Grid.GoToPageAsync((Grid.PageSettings.CurrentPage) - 1);
    }
    public void ShowFirstPage()
    {
        Grid.GoToPageAsync(1);
    }
    public void ShowLastPage()
    {
        Grid.GoToPageAsync(totalPages);
    }
    public void LaunchEnteredPage(Microsoft.AspNetCore.Components.ChangeEventArgs page)
    {
        if (page.Value == null || page.Value.ToString() == "")
        {
            return;
        }
        else
        {
            double enteredPage = Convert.ToDouble(page.Value);
            if (enteredPage <= totalPages)
                Grid.GoToPageAsync(enteredPage);
        }
    }

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }


    private async void onClickDeleteById()
    {
        bool isSuccess = await OrderService.DeleteProduct(numericValueIdDelte);
        if (isSuccess)
        {
            await this.ToastObj.ShowAsync(Toast[2]);

        }
        else
        {
            await this.ToastObj.ShowAsync(Toast[3]);
        }

    }

    private async Task onClickSearchId()
    {
        // products = await OrderService.GetProductByIdAsync(numericValue);
        string urll = url + $"({numericValue})";
        dm.Url = url + $"?filter=productid eq {numericValue}";
        //await LoadData();

        await Grid.Refresh();
    }
    private async Task onClickSearchName()
    {
        products = await OrderService.GetProductByName(nameProduct);
        await Grid.Refresh();
    }
    private async Task onAddProduct()
    {
        IsAddLoadingVisible = true;
        await Task.Delay(2000);

        var product = await OrderService.AddProduct(productDto);
        if (product.ProductId != 0)
        {
            await this.ToastObj.ShowAsync(Toast[1]);
            this.IsVisible = false;
            await LoadData();

        }
        await this.ToastObj.ShowAsync(Toast[3]);
        this.IsVisible = false;
        IsAddLoadingVisible = false;

    }

    private async Task onToggleClick()
    {
        qry += "select=";
        foreach (DataModel dataModel in DataSelect)
        {
            if (dataModel.IsChecked)
            {

                qry += $"{dataModel.Id.ToLower()},";
            }
        }
        qry = qry.Remove(qry.Length - 1, 1);
        qry += "&orderby=";


        foreach (DataModel dataModel in DataOrderBy)
        {
            if (dataModel.IsChecked)
            {

                qry += $"{dataModel.Id.ToLower()},";
            }

        }
        qry = qry.Remove(qry.Length - 1, 1);
        qry += $" {stringOrderBy}";
        nextPage = "";
        dm.Url = url + qry;
        //await LoadData();

        await Grid.Refresh();
        qry = "?";

    }

    public async Task ActionBeginHandler(ActionEventArgs<Product> args)
    {

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Edit")
            {
                args.Data.OrderItem = new List<OrderItem>() { };
                var res = await OrderService.PutProductAsync(args.Data) ;
                if(res == true)
                {
                    nextPage = "";
                    await this.ToastObj.ShowAsync(Toast[1]);
                    await LoadData();
                    await Grid.Refresh();
                }
                else
                {
                    await this.ToastObj.ShowAsync(Toast[3]);
                }

            }

        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            // await ProductService.DeleteProduct((int)args.Data.id);
        }
    }
    private DataModel[] DataSelect = {

        new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=true},
        new DataModel { Text = "Name", Id = "Name" ,IsChecked=true },
        new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=true },
        new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=true  },
        new DataModel { Text = "Unit", Id = "Unit",IsChecked=true  },

    };
    private List<ToastModel> Toast = new List<ToastModel>
    {
        new ToastModel{ Title = "Warning!", Content="There was a problem with your network connection.", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content="Your add product successfully.", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Success!", Content="Your delete product successfully.", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content="A problem occurred while submitting your data.", CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    private DataModel[] DataOrderBy = {

        new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=false },
        new DataModel { Text = "Name", Id = "Name" ,IsChecked=false },
        new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=false },
        new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=false  },
        new DataModel { Text = "Unit", Id = "Unit",IsChecked=false  },

    };

    public class DataModel
    {
        public string Text { get; set; }
        public string Id { get; set; }
        public bool IsChecked { get; set; }

    }

}



<style>
    .btn {
        border-radius: 0;
        height: 50px;
        width: 400px;
        background-color: #007BFF;
    }

    .e-copy::before {
        content: '\e77b';
    }

    .e-btn.e-icon-btn {
        padding: initial;
    }

    .warpper-product {
        height: 100%;
    }

    a, a:hover, .highcontrast #dialog a, .highcontrast #dialog a:hover {
        color: inherit;
        text-decoration: none;
    }

    .e-btn-icon.e-icons.e-ok-icon.e-icon-left:before {
        content: '\e7ff';
    }

    .e-btn-icon.e-icons.e-close-icon.e-icon-left:before {
        content: '\e878';
    }

    .PagerTemplate {
        width: 1000px;
        height: 64px;
        left: 183px;
        top: 615px;
        border-radius: 0px;
    }

    .textbox {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 2px;
        text-align: center;
    }

    .add-border {
        border: #ddd 1px solid;
    }

    .align-icons {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 16px;
        cursor: pointer;
    }

    .e-firstpage {
        margin-left: 6px;
    }

    .e-next {
        margin-left: 16px;
    }

    .disableFirst {
        pointer-events: none;
        opacity: 0.3;
    }

    .disableLast {
        pointer-events: none;
        opacity: 0.3;
    }

    .disableFront {
        pointer-events: none;
        opacity: 0.3;
    }

    .disableBack {
        pointer-events: none;
        opacity: 0.3;
    }

</style>


