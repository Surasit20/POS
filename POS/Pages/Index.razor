@page "/product"
@using System.Text.Json;
@inject HttpClient Http
@using Frontend.Service.OrderService;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using global::Shared.ModelDTO;
@inject IOrderService OrderService
<PageTitle>Index</PageTitle>

<div class="container-fluid warpper-product">
    @if (products != null)
    {
        <SfFab Target="#target" IconCss="e-icons e-plus" OnClick="@OpenDialog" Position=FabPosition.TopRight></SfFab>
        <div class="container">
            <div class="row">
                <div class="col">
                    <h3>Select</h3>
                    <SfListView DataSource="@DataSelect" ShowCheckBox="true" onchange="Rerender">
                        <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
                    </SfListView>
                </div>

                <div class="col">
                    <h3>Order By</h3>
                    <SfRadioButton Label="Desc" Name="Desc" Value="desc" @bind-Checked="stringOrderBy"></SfRadioButton>
                    <SfRadioButton Label="Asc" Name="Asc" Value="asc" @bind-Checked="stringOrderBy"></SfRadioButton>
                    <SfListView DataSource="@DataOrderBy" ShowCheckBox="true" onchange="Rerender">
                        <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text" IsChecked="IsChecked"></ListViewFieldSettings>
                    </SfListView>
                </div>

            </div>


            <div class="row my-3">
                <div class="d-flex justify-content-center">
                    <SfButton @onclick="onToggleClick" CssClass="btn" IsToggle="true" IsPrimary="true">Search</SfButton>
                </div>
            </div>


            <div class="row">
                <div class="col">

                    <h2>
                        Search By Product ID
                    </h2>
                    <div class="row">
                        <div class="col-10">
                            <SfNumericTextBox TValue="int" @bind-Value="@numericValue"></SfNumericTextBox>
                        </div>
                        <div class="col-2">
                            <SfButton @onclick="onClickSearchId" IsToggle="true" IsPrimary="true">Search</SfButton>
                        </div>
                    </div>


                </div>
                <div class="col">
                    <h2>
                        Search By Product Name
                    </h2>

                    <div class="row">
                        <div class="col-10">
                            <SfTextBox TValue="string" @bind-Value="@nameProduct"></SfTextBox>
                        </div>
                        <div class="col-2">
                            <SfButton @onclick="onClickSearchName" IsToggle="true" IsPrimary="true">Search</SfButton>
                        </div>
                    </div>
                </div>
            </div>

            <br />
        </div>
        <SfGrid @ref="Grid" TValue="Product" AllowPaging="true" DataSource="products">

            @*		<GridPageSettings PageSize="5"></GridPageSettings>
        <GridColumn>
        <GridColumn Field=@nameof(Product.ProductId) HeaderText="Product ID" TextAlign="TextAlign.Right" Width="120" DefaultValue="0"></GridColumn>
        <GridColumn Field=@nameof(Product.Name) HeaderText="Product ID" Width="120" DefaultValue="0"></GridColumn>
        <GridColumn Field=@nameof(Product.PurchasePrice) HeaderText="Purchase Price" Width="120" DefaultValue="0"></GridColumn>
        <GridColumn Field=@nameof(Product.SellingPrice) HeaderText="Selling Price" Width="120" DefaultValue="0"></GridColumn>
        <GridColumn Field=@nameof(Product.Unit) HeaderText="Unit" Width="120" DefaultValue="0"></GridColumn>
        </GridColumn>*@

        </SfGrid>


        <SfDialog Width="300px" ShowCloseIcon="true" CloseOnEscape="true" @bind-Visible="@IsVisible">
            <DialogTemplates>
                <Header>
                    <div>Add Product</div>
                </Header>
                <Content>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Name" FloatLabelType='@FloatLabelType.Always' Placeholder='Name'></SfTextBox>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Description" FloatLabelType='@FloatLabelType.Always' Placeholder='Description'></SfTextBox>
                    <SfNumericTextBox TValue="decimal" @bind-Value="@productDto.PurchasePrice" FloatLabelType='@FloatLabelType.Always' Placeholder='Purchase Price'></SfNumericTextBox>
                    <SfNumericTextBox TValue="decimal" @bind-Value="@productDto.SellingPrice" FloatLabelType='@FloatLabelType.Always' Placeholder='Selling Price'></SfNumericTextBox>
                    <SfTextBox TValue="string" @bind-Value="@productDto.Unit" FloatLabelType='@FloatLabelType.Always' Placeholder='Unit'></SfTextBox>

                </Content>
            </DialogTemplates>
            <DialogButtons>

                <DialogButton Content="@((!IsAddLoadingVisible) ?"Add" :"Loading....")" Disabled="@IsAddLoadingVisible" IsPrimary="true" IconCss="e-icons e-plus" OnClick="@onAddProduct" />
            
                <DialogButton Content="Cancel" IconCss="e-icons e-close-icon" OnClick="@CloseDialog" />
            </DialogButtons>
        </SfDialog>

        <div class="col-lg-4 control-section">
            <SfToast @ref="ToastObj" ID="toast_type">
                <ToastPosition X="@ToastPosition"></ToastPosition>
            </SfToast>
        </div>

    }
    else
    {
        <p>Loading....</p>
    }
</div>


@*<SfDataManager Url="@url" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>*@





@code {

    SfGrid<Product> Grid { get; set; }
    List<Product> products { get; set; }
    string url = "https://localhost:7085/odata/ProductOData";
    private Query Qry = new Query().Expand(new List<string> { "Name" });
    string qry = "?";
    private string stringOrderBy = "desc";
    private int numericValue { get; set; } = 10;
    private string nameProduct { get; set; } = "";
    private bool IsVisible { get; set; } = false;
    private bool IsAddLoadingVisible { get; set; } = false;
    private ProductDTO productDto { get; set; } = new ProductDTO();
    SfToast ToastObj;
    private string ToastPosition = "Right";
    public async Task<List<Product>> LoadData()
    {
        try
        {
            return await OrderService.GetProductsAsync(qry);
        }
        catch (Exception err)
        {
            Console.WriteLine(err.Message);
            return new List<Product>();
        }

    }
    protected async override Task OnInitializedAsync()
    {

        products = await OrderService.GetProductsAsync(qry);

    }
    private DataModel[] DataSelect = {

        new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=false },
        new DataModel { Text = "Name", Id = "Name" ,IsChecked=false },
        new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=false },
        new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=false  },
        new DataModel { Text = "Unit", Id = "Unit",IsChecked=false  },

    };
    private List<ToastModel> Toast = new List<ToastModel>
    {
        new ToastModel{ Title = "Warning!", Content="There was a problem with your network connection.", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content="Your add product successfully.", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content="A problem occurred while submitting your data.", CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    private DataModel[] DataOrderBy = {

        new DataModel { Text ="Prduct Id", Id = "ProductId",IsChecked=false },
        new DataModel { Text = "Name", Id = "Name" ,IsChecked=false },
        new DataModel { Text = "Selling Price", Id = "SellingPrice" ,IsChecked=false },
        new DataModel { Text = "Purchase Price", Id = "PurchasePrice",IsChecked=false  },
        new DataModel { Text = "Unit", Id = "Unit",IsChecked=false  },

    };

    public class DataModel
    {
        public string Text { get; set; }
        public string Id { get; set; }
        public bool IsChecked { get; set; }

    }



    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }
    async Task onClickSearchId()
    {
        products = await OrderService.GetProductByIdAsync(numericValue);
        StateHasChanged();
    }
    async Task onClickSearchName()
    {
        products = await OrderService.GetProductByName(nameProduct);
        StateHasChanged();
    }
    async Task onAddProduct()
    {
        IsAddLoadingVisible = true;
        await Task.Delay(2000);
        
        var product = await OrderService.AddProduct(productDto);
        if (product.ProductId != 0)
        {
            await this.ToastObj.ShowAsync(Toast[1]);
       
            this.IsVisible = false;

        }
        IsAddLoadingVisible = false;
        StateHasChanged();
    }

    async Task onToggleClick()
    {
        qry += "select=";
        foreach (DataModel dataModel in DataSelect)
        {
            if (dataModel.IsChecked == true)
            {

                qry += $"{dataModel.Id.ToLower()},";
            }
        }
        qry = qry.Remove(qry.Length - 1, 1);
        qry += "&orderby=";


        foreach (DataModel dataModel in DataOrderBy)
        {
            if (dataModel.IsChecked == true)
            {

                qry += $"{dataModel.Id.ToLower()},";
            }

        }
        qry = qry.Remove(qry.Length - 1, 1);
        qry += $" {stringOrderBy}";

        products = await OrderService.GetProductsAsync(qry);
        StateHasChanged();
        qry = "?";
        Grid.Refresh();
    }

}



<style>
    .btn {
        border-radius: 0;
        height: 50px;
        width: 400px;
        background-color: #007BFF;
    }

    .e-copy::before {
        content: '\e77b';
    }

    .e-btn.e-icon-btn {
        padding: initial;
    }

    .warpper-product {
        height: 100%;
    }

    a, a:hover, .highcontrast #dialog a, .highcontrast #dialog a:hover {
        color: inherit;
        text-decoration: none;
    }

    .e-btn-icon.e-icons.e-ok-icon.e-icon-left:before {
        content: '\e7ff';
    }

    .e-btn-icon.e-icons.e-close-icon.e-icon-left:before {
        content: '\e878';
    }
</style>
